<?php

namespace Semknox\Core\Services\Search;

class SearchResponse
{
    /**
     * Raw Semknox search response
     * @var array
     */
    private $response;

    public function __construct(array $response)
    {
        $this->response = $response;
    }

    private function get($key, $default=null)
    {
        return isset($this->response[$key])
            ? $this->response[$key]
            : $default;
    }

    /**
     * Return information
     * @return array
     */
    public function getInterpretedQuery()
    {
        return $this->get('interpretedQuery');
    }

    /**
     * Return the answer text generated by Semknox for this query.
     * @return string
     */
    public function getAnswerText()
    {
        return $this->get('answerText');
    }

    /**
     * Return all filter options available for this search.
     * @return mixed|null
     */
    public function getAvailableFilters()
    {
        return $this->get('filterOptions');
    }

    /**
     * Return filters that are active for this query.
     * @return mixed|null
     */
    public function getActiveFilters()
    {
        return $this->get('activeFilterOptions');
    }

    /**
     * Return the number of total results for this search. This includes all variations. If you have two products and one of them is a variable product with 6 sub-variations, the returned value will be 8.
     * @return mixed|null
     */
    public function getTotalResults()
    {
        return $this->get('totalResults');
    }

    /**
     *
     */
    public function getAvailableResults()
    {
        return $this->get('resultsAvailable');
    }

    /**
     * Alias for `getResults()`.
     * @return ResultItem[]
     */
    public function getProducts()
    {
        return $this->getResults();
    }

    /**
     * Return an array of ResultItems (i.e. the products)
     * @return ResultItem[]
     */
    public function getResults()
    {
        $return = [];
        $results = $this->get('searchResults');

        foreach($results as $result) {
            $return[] = ResultItemFactory::getProduct($result);
        }

        return $return;
    }
}