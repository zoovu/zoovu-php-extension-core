<?php

namespace Semknox\Core\Services\Search;

use Semknox\Core\Services\Search\Filters\TreeFilter;
use Semknox\Core\Services\Traits\ArrayGetTrait;

class SearchResponse
{
    use ArrayGetTrait;

    /**
     * Raw Semknox search response
     * @var array
     */
    private $response;

    public function __construct(array $response)
    {
        $this->response = $response;
    }

    private function get($key, $default=null)
    {
        return $this->arrayGet($this->response, $key, $default);
    }

    /**
     * Return information
     * @return array
     */
    public function getInterpretedQuery()
    {
        return $this->get('interpretedQuery');
    }

    /**
     * Return the answer text generated by Semknox for this query.
     * @return string
     */
    public function getAnswerText()
    {
        return $this->get('answerText');
    }

    /**
     * Return all filter options available for this search.
     * @return TreeFilter[]
     */
    public function getAvailableFilters()
    {
        $activeFilters = $this->getActiveFilters();
        $filters = $this->get('filterOptions');
        $result = [];

        foreach($filters as $filter) {
            $result[] = SearchResultFactory::getFilter($filter, $activeFilters);
        }

        return $result;
    }

    /**
     * Return filters that are active for this query.
     * @return mixed|null
     */
    public function getActiveFilters()
    {
        return $this->get('activeFilterOptions');
    }

    public function getAvailableSortingOptions()
    {
        return [];
    }

    /**
     * Return the number of total results for this search. If no $resultGroup is passed this will include products as well as content results.
     * @param null $resultGroup TotalResults of which resultGroup. If null it will return the number of results for all resultGroups combined.
     * @return mixed|null
     */
    public function getTotalResults($resultGroup=null)
    {
        return $resultGroup
            ? $this->getResultGroup($resultGroup, 'totalResults')
            : $this->get('totalResults');
    }

    /**
     * Get the total number of products found for this request
     * @return array|mixed|null
     */
    public function getTotalProductResults()
    {
        return $this->getTotalResults('products');
    }

    /**
     * Alias for `getResults('products')`.
     * @param bool $flattened
     * @return Product[]
     */
    public function getProducts()
    {
        return $this->getResults('products');
    }

    /**
     * Return an array of ResultItems (i.e. the products)
     * @param bool $flattened Return grouped products as standalone products.
     * @return Product[]
     */
    public function getResults($groupType, $flattened=false)
    {
        $return = [];

        $products = $this->getResultGroup($groupType, 'results');

        foreach($products as $items) {
            if($flattened) {
                foreach($items as $item) {
                    $return[] = SearchResultFactory::getProduct([$item]);
                }
            }
            else {
                $return[] = SearchResultFactory::getProduct($items);
            }
        }

        return $return;
    }

    /**
     * Return the searchResult-group with the given type. The type can be "products" or "content".
     * @param $groupType
     * @param $key Which key to return from the found searchResultGroup. Returns the whole resultGroup when no key is specified.
     * @return array
     */
    private function getResultGroup($groupType, $key=null)
    {
        foreach($this->get('searchResults') as $searchResult) {
            if($searchResult['type'] === $groupType) {
                if(!$key) {
                    return $searchResult;
                }
                else {
                    return isset($searchResult[$key])
                        ? $searchResult[$key]
                        : [];
                }
            }
        }

        return [];
    }


}